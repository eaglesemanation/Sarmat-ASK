SET client_encoding = 'UTF8';

CREATE OR REPLACE FUNCTION command_inner_au_state_e()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
declare
    tcii tmp_cmd_inner;
    cirec command_inner;
    rbl BOOLEAN;
    rr robot;
    crp_ command_rp;
    cmd command;
    cg_ command_gas;
    cg_id BIGINT;
    cnid BIGINT;
    cnt BIGINT;
    ncitext TEXT;
    newcmddir BIGINT;
    lp_ BIGINT;
    cmd_dest_ BIGINT;
BEGIN
    FOR tcii IN (
        SELECT * FROM tmp_cmd_inner
            WHERE extend.is_null_str(action)
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec
            FROM command_inner
            WHERE id = tcii.ci_id;
        -- смотрим, а не надо ли разблокировать зря заблокированное при отмене  юстировки
        IF (cirec.command_type_id = 6)
            AND (coalesce(cirec.command_rp_id, 0) <> 0)
            AND (coalesce(cirec.command_rp_id, 0) <> -1)
        THEN -- было MOVE и было по команде
            SELECT exists(
                SELECT * FROM command
                    WHERE id = (
                        SELECT command_id
                            FROM command_rp
                            WHERE id = cirec.command_rp_id
                    )
                    AND state = 2
                    AND command_type_id = 19
            ) INTO rbl;
            IF rbl THEN
                PERFORM service.unlock_all_not_ness(cirec.robot_id);
            END IF;
        END IF;
        UPDATE command_rp
            SET command_inner_last_robot_id = cirec.robot_id,
                command_inner_executed = cirec.id,
                error_code_id = cirec.error_code_id
            WHERE id = cirec.command_rp_id;
        DELETE FROM tmp_cmd_inner
            WHERE ci_id = tcii.ci_id
            AND extend.is_null_str(action);
    END LOOP;

    -- пометить все исходные команды как плохие
    FOR tcii IN (
        SELECT *
            FROM tmp_cmd_inner
            WHERE coalesce(action, '-') = 'B'
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec
            FROM command_inner
            WHERE id = tcii.ci_id;
        DELETE FROM tmp_cmd_inner
            WHERE ci_id = tcii.ci_id
            AND coalesce(action, '-') = 'B';
        FOR crp_ IN (
            SELECT *
                FROM command_rp
                WHERE id = cirec.command_rp_id
        ) LOOP
            UPDATE command_rp SET state = 2 WHERE id = crp_.id;
            FOR cmd IN (
                SELECT *
                    FROM command
                    WHERE id = crp_.command_id
            ) LOOP
                UPDATE command SET state = 2 WHERE id = cmd.id;
                FOR cg_ IN (
                    SELECT *
                        FROM command_gas
                        WHERE id = cmd.command_gas_id
                ) LOOP
                    UPDATE command_gas SET state = 2 WHERE id = cg_.id;
                END LOOP;
            END LOOP;
        END LOOP;
    END LOOP;

    -- повторить команду
    FOR tcii IN (
        SELECT *
            FROM tmp_cmd_inner
            WHERE coalesce(action,'-') = 'R'
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec FROM command_inner WHERE id = tcii.ci_id;
        SELECT * INTO rr FROM robot WHERE id = cirec.robot_id;
        cnt := helpers.substrrpos(cirec.command_to_run,';');
        -- FIXME: Casting from BIGINT to INT, possible data loss
        ncitext := substring(cirec.command_to_run FROM 1 FOR cnt::int - 1);
        newcmddir := cirec.direction;
        IF (cirec.command_type_id IN (6,5)) THEN -- move/unload
            IF (obj_rpart.is_way_free(rr.id, obj_robot.get_cmd_inner_npp_dest(cirec.id,1), cirec.direction) <> 1) THEN
                newcmddir := obj_rpart.get_another_direction(newcmddir);
                IF (obj_rpart.is_way_free(rr.id, cirec.npp_dest, newcmddir) <> 1) THEN
                    RAISE EXCEPTION 'Crash alarm! The way is busy for robot % to track % on all directions!', rr.id, cirec.npp_dest
                        USING errcode = 50012;
                ELSE
                    ncitext := obj_robot.get_cmd_text_another_dir(ncitext);
                END IF;
            END IF;
        ELSIF (cirec.command_type_id IN (4)) THEN -- load
            IF (obj_rpart.is_way_free(rr.id, obj_robot.get_cmd_inner_npp_dest(cirec.id, 1), cirec.direction) <> 1) THEN
                newcmddir := obj_rpart.get_another_direction(newcmddir);
                IF (obj_rpart.is_way_free(rr.id, cirec.npp_dest, newcmddir) <> 1) THEN
                    RAISE EXCEPTION 'Crash alarm! The way is busy for robot % to track % on all directions!', rr.id, cirec.npp_src
                        USING errcode = 50012;
                ELSE
                    ncitext := obj_robot.get_cmd_text_another_dir(ncitext);
                END IF;
            END IF;
        END IF;

        IF (cirec.check_point IS null) THEN -- нет промежуточных точек
            INSERT INTO command_inner (
                command_type_id, rp_id, cell_src_sname, cell_dest_sname,
                state, command_rp_id, robot_id, command_to_run, track_src_id,
                track_dest_id, direction, cell_src_id, cell_dest_id,
                npp_src, npp_dest,
                track_id_begin, track_npp_begin,
                cell_sname_begin, container_id
            ) VALUES (
                cirec.command_type_id, cirec.rp_id, cirec.cell_src_sname, cirec.cell_dest_sname,
                1, cirec.command_rp_id, cirec.robot_id, ncitext, cirec.track_src_id,
                cirec.track_dest_id, newcmddir, cirec.cell_src_id, cirec.cell_dest_id,
                cirec.npp_src, cirec.npp_dest,
                rr.current_track_id, rr.current_track_npp,
                obj_rpart.get_cell_name_by_track_id(rr.current_track_id), cirec.container_id
            ) RETURNING id INTO cnid;
        ELSE -- есть промежуточные точки
            lp_ := obj_robot.get_cmd_inner_last_checkpoint(cirec.id);
            cmd_dest_ := obj_robot.get_cmd_inner_npp_dest(cirec.id);
            IF (lp_ = cmd_dest_)
                OR (rr.current_track_npp = cmd_dest_)
            THEN -- уже открыт проход куда надо или находимся там где надо
                ncitext := obj_robot.get_cmd_text_wo_cp(ncitext);
                INSERT INTO command_inner (
                    command_type_id, rp_id, cell_src_sname, cell_dest_sname,
                    state, command_rp_id, robot_id, command_to_run, track_src_id,
                    track_dest_id, direction, cell_src_id, cell_dest_id,
                    npp_src, npp_dest,
                    track_id_begin, track_npp_begin, cell_sname_begin, container_id
                ) VALUES (
                    cirec.command_type_id, cirec.rp_id, cirec.cell_src_sname, cirec.cell_dest_sname,
                    1, cirec.command_rp_id, cirec.robot_id, ncitext, cirec.track_src_id,
                    cirec.track_dest_id, newcmddir, cirec.cell_src_id, cirec.cell_dest_id,
                    cirec.npp_src, cirec.npp_dest,
                    rr.current_track_id, rr.current_track_npp,
                    obj_rpart.get_cell_name_by_track_id(rr.current_track_id), cirec.container_id
                ) RETURNING id INTO cnid;
            ELSE
                ncitext := obj_robot.get_cmd_text_new_cp(ncitext, lp_);
                INSERT INTO command_inner (
                    command_type_id, rp_id, cell_src_sname, cell_dest_sname,
                    state, command_rp_id, robot_id, command_to_run, track_src_id,
                    track_dest_id, direction, cell_src_id, cell_dest_id,
                    npp_src, npp_dest,
                    track_id_begin, track_npp_begin, cell_sname_begin, container_id, check_point
                ) VALUES (
                    cirec.command_type_id, cirec.rp_id, cirec.cell_src_sname, cirec.cell_dest_sname,
                    1, cirec.command_rp_id, cirec.robot_id, ncitext, cirec.track_src_id,
                    cirec.track_dest_id, newcmddir, cirec.cell_src_id, cirec.cell_dest_id,
                    cirec.npp_src, cirec.npp_dest,
                    rr.current_track_id , rr.current_track_npp ,
                    obj_rpart.get_cell_name_by_track_id(rr.current_track_id), cirec.container_id, lp_
                ) RETURNING id INTO cnid;
            END IF;
        END IF;
        UPDATE robot SET command_inner_assigned_id = cnid WHERE id = rr.id;
        DELETE FROM tmp_cmd_inner WHERE ci_id = tcii.ci_id AND coalesce(action, '-') = 'R';
    END LOOP;

    -- обновляем текущее нахождение контейнера для приема товара command_gas
    FOR tcii IN (
        SELECT *
            FROM tmp_cmd_inner
            WHERE coalesce(action, '-') = 'G'
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec FROM command_inner WHERE id = tcii.ci_id;
        FOR cg_id IN (
            SELECT cg.id
                FROM command_rp crp
                INNER JOIN command c
                    ON crp.command_id = c.id
                INNER JOIN command_gas cg
                    ON c.command_gas_id = cg.id
                WHERE crp.id = cirec.command_rp_id
                    AND cg.command_type_id = 11
        ) LOOP
            UPDATE command_gas
                SET container_cell_name = cirec.cell_dest_sname,
                    container_rp_id = cirec.rp_id
                WHERE id = cg_id;
        END LOOP;
        DELETE FROM tmp_cmd_inner WHERE ci_id = tcii.ci_id AND coalesce(action, '-') = 'G';
    END LOOP;

    -- помечаем что контейнер на платформе
    FOR tcii IN (
        SELECT *
            FROM tmp_cmd_inner
            WHERE coalesce(action, '-') = 'L'
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec FROM command_inner WHERE id = tcii.ci_id;
        FOR cg_id IN (
            SELECT cg.id
                FROM command_rp crp
                INNER JOIN command c
                    ON crp.command_id = c.id
                INNER JOIN command_gas cg
                    ON c.command_gas_id = cg.id
                WHERE crp.id = cirec.command_rp_id
                    AND cg.command_type_id = 11
        ) LOOP
            UPDATE command_gas
                SET container_cell_name = '',
                    container_rp_id = cirec.rp_id
                WHERE id = cg_id;
        END LOOP;
        DELETE FROM tmp_cmd_inner WHERE ci_id = tcii.ci_id AND coalesce(action, '-') = 'L';
    END LOOP;

    -- помечаем что команда command назначена уже
    FOR tcii IN (
        SELECT *
            FROM tmp_cmd_inner
            WHERE coalesce(action, '-') = 'N'
            ORDER BY ci_id
    ) LOOP
        SELECT * INTO cirec FROM command_inner WHERE id = tcii.ci_id;
        UPDATE command SET state=3
            WHERE id = (
                SELECT command_id FROM command_rp WHERE id = cirec.command_rp_id
            )
            AND state < 3
            AND state <> 2;
        DELETE FROM tmp_cmd_inner WHERE ci_id = tcii.ci_id AND coalesce(action, '-') = 'N';
    END LOOP;

    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION command_inner_au_state_e()
    OWNER TO postgres;

DROP TRIGGER IF EXISTS command_inner_au_state_e ON command_inner;

CREATE TRIGGER command_inner_au_state_e
    AFTER UPDATE OF state, problem_resolving_id
    ON command_inner
    FOR EACH ROW
    EXECUTE PROCEDURE command_inner_au_state_e();

-- vim: ft=pgsql
