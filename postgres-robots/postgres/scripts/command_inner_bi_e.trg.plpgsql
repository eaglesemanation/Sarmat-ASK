CREATE OR REPLACE FUNCTION command_inner_bi_e()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    cnt BIGINT;
    rr RECORD;
    -- error_name TEXT;
    gnpp BIGINT;
BEGIN
    NEW.user_name := current_user;

    IF NEW.id IS null THEN
        SELECT nextval('seq_command_inner') INTO NEW.id;
        NEW.date_time_create := LOCALTIMESTAMP;
        NEW.command_to_run := NEW.command_to_run || ';' || NEW.id;
    END IF;

    IF NEW.state = 1 THEN
        SELECT count(*) INTO cnt
            FROM command_inner
            WHERE robot_id = NEW.robot_id
                AND state=1;
        IF cnt > 0 THEN
            RAISE EXCEPTION 'Error in algorithm cmd manager for robot %', NEW.robot_id
                USING errcode = 50003;
        END IF;
    END IF;

    -- теперь проверяем корректность подачи команды
    FOR rr IN (
        SELECT num_of_robots, rp.id rp_id, repository_type, current_track_npp
            FROM robot r
            INNER JOIN repository_part rp
                ON r.repository_part_id = rp.id
            WHERE r.id = NEW.robot_id
    ) LOOP
        IF (rr.num_of_robots = 2) THEN -- проверки нужны
            IF (NEW.command_type_id = 4) THEN -- load
                gnpp := NEW.npp_src;
                IF (NEW.check_point IS null) THEN
                    IF obj_rpart.is_way_locked(rr.rp_id, NEW.robot_id, NEW.npp_src) = 0 THEN
                        RAISE EXCEPTION 'Goal npp % is not locked for robot % for cmd_inner ', NEW.npp_src, NEW.robot_id
                            USING errcode = 50003;
                    END IF;
                ELSE
                    IF obj_rpart.is_way_locked(rr.rp_id, NEW.robot_id, NEW.check_point) = 0 THEN
                        RAISE EXCEPTION 'Сheck point npp % is not locked for robot % for cmd_inner ', NEW.check_point, NEW.robot_id
                            USING errcode = 50003;
                    END IF;
                END IF;
            END IF;
            IF (NEW.command_type_id IN (5,6)) THEN -- unload, move
                gnpp := NEW.npp_dest;
                IF (NEW.check_point IS null) THEN
                    IF obj_rpart.is_way_locked(rr.rp_id, NEW.robot_id, NEW.npp_dest) = 0 then
                        RAISE EXCEPTION 'Goal npp % is not locked for robot % for cmd_inner ', NEW.npp_dest, NEW.robot_id
                            USING errcode = 50003;
                    END IF;
                ELSE
                    IF obj_rpart.is_way_locked(rr.rp_id, NEW.robot_id, NEW.check_point)=0 then
                        RAISE EXCEPTION 'Сheck point npp % is not locked for robot % for cmd_inner ', NEW.check_point, NEW.robot_id
                            USING errcode = 50003;
                    END IF;
                END IF;
            END IF;
            IF (rr.repository_type = 0) THEN -- линейный с двумя роботами
                -- проверяем на неправильное направление
                IF (rr.current_track_npp > gnpp AND NEW.direction = 1)
                    OR (rr.current_track_npp < gnpp and new.direction = 0)
                THEN
                    RAISE EXCEPTION 'Emulator choose wrong direction for cmd_inner for robot %', NEW.robot_id
                        USING errcode = 50003;
                END IF;
            END IF;
        END IF;
    END LOOP;
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION command_inner_bi_e()
    OWNER TO postgres;

DROP TRIGGER IF EXISTS command_inner_bi_e ON command_inner;

CREATE TRIGGER command_inner_bi_e
    BEFORE INSERT
    ON command_inner
    FOR EACH ROW
    EXECUTE PROCEDURE command_inner_bi_e();

-- vim: ft=pgsql
