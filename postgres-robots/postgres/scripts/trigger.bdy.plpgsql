SET client_encoding = 'UTF8';

CREATE OR REPLACE FUNCTION trigger.finish_command(
	INOUT new command)
    RETURNS command
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cg RECORD;
    cnt BIGINT;
BEGIN
    PERFORM service.log2file('  триггер command_bu_cis_e - procedure finish_command');
    NEW.date_time_end := LOCALTIMESTAMP;
    NEW.state := 5;
    IF (coalesce(NEW.command_gas_id, 0) <> 0) THEN
        -- container.accept
        FOR cg IN (
            SELECT * FROM command_gas
                WHERE id = NEW.command_gas_id
                AND command_type_id IN (11, 18, 14)
        ) LOOP
            UPDATE command_gas
                SET state = 5, container_cell_name = NEW.cell_dest_sname, container_rp_id = NEW.rp_dest_id
                WHERE id = NEW.command_gas_id;
        END LOOP;
        -- good.out
        FOR cg IN (
            SELECT * FROM command_gas
                WHERE id = NEW.command_gas_id
                AND command_type_id = 12
        ) LOOP
            PERFORM service.log2file('  триггер command_bu_cis_e - cg_type=12 :new.command_gas_id=' || NEW.command_gas_id || ' :new.container_id=' || NEW.container_id || ' :new.cell_dest_sname' || NEW.cell_dest_sname);
            UPDATE command_gas
                SET state = 1
                WHERE id = NEW.command_gas_id AND state < 1;
            -- если команда не промежуточная, то выдаем на гора
            IF (NEW.is_intermediate = 0) THEN
                PERFORM service.log2file('  триггер command_bu_cis_e - перед доб command_gas_out_container ');
                INSERT INTO command_gas_out_container(
                    cmd_gas_id, container_id, container_barcode, good_desc_id, quantity, cell_name, gd_party_id
                ) SELECT
                    NEW.command_gas_id, NEW.container_id, barcode, good_desc_id, quantity, NEW.cell_dest_sname, ccn.gdp_id
                    FROM container cn
                    INNER JOIN container_content ccn
                        ON ccn.container_id = cn.id
                    WHERE cn.id = NEW.container_id
                    AND cg.good_desc_id = ccn.good_desc_id
                    AND coalesce(cg.gd_party_id, 0) = coalesce(ccn.gdp_id, 0);
                GET DIAGNOSTICS cnt = ROW_COUNT;
                PERFORM service.log2file('  триггер command_bu_cis_e - после доб command_gas_out_container = ' || cnt);
                INSERT INTO tmp_cmd(id, action) VALUES (NEW.id, 3);
            END IF;
        END LOOP;
    END IF;
END;
$BODY$;
ALTER FUNCTION trigger.finish_command(command) OWNER TO postgres;
COMMENT ON FUNCTION trigger.finish_command(command)
    IS 'Migrated inline procedure for command_bu_cis_e trigger
';

CREATE OR REPLACE FUNCTION trigger.finish_crp(
	INOUT new command_rp)
    RETURNS command_rp
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
	PERFORM service.log2file('  триггер command_rp_bu_cis_e - пуск finish_crp');
	NEW.state := 5;
	NEW.substate := 5;
	NEW.date_time_end := LOCALTIMESTAMP;
	-- сообщили вверх, что выполнено
	INSERT INTO tmp_cmd_rp(id, action) VALUES(NEW.id, 1);
END;
$BODY$;
ALTER FUNCTION trigger.finish_crp(command_rp) OWNER TO postgres;
COMMENT ON FUNCTION trigger.finish_crp(command_rp)
    IS 'Migrated inline procedure for command_rp_bu_cis_e trigger
';

CREATE OR REPLACE FUNCTION trigger.cmd_retry(
	INOUT new command_inner)
    RETURNS command_inner
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    PERFORM service.log2file('trigger command_inner_bu_problemr_e - Пришло решение проблемы "повторить" от '
        || current_user || ' для робота '
        || NEW.robot_id ||' команды '
        || NEW.id);
    UPDATE robot
        SET state = 0, command_inner_id = null,
            cmd_error_descr = null, wait_for_problem_resolve = 0
        WHERE id = NEW.robot_id;
    NEW.state := 2;
    INSERT INTO tmp_cmd_inner (ci_id, action)
        VALUES (NEW.id,'R');
    UPDATE emu_robot_problem
        SET state = 0
        WHERE state = 3
            AND robot_id = NEW.robot_id;
    --update robot set command_inner_assigned_id=:new.id where id=:new.robot_id;
    --:new.problem_resolving_id:=null;
    --:new.date_time_begin:=null;
END;
$BODY$;
ALTER FUNCTION trigger.cmd_retry(command_inner) OWNER TO postgres;
COMMENT ON FUNCTION trigger.cmd_retry(command_inner)
    IS 'Migrated inline procedure for command_inner_bu_problemr_e trigger
';

CREATE OR REPLACE FUNCTION trigger.cmd_cancel(
	INOUT new command_inner,
    IN action_ text DEFAULT null)
    RETURNS command_inner
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    PERFORM service.log2file('trigger command_inner_bu_problemr_e - Пришло решение проблемы "отменить" от '
                            || current_user || ' для робота '
                            || NEW.robot_id || ' команды '
                            || NEW.id);
    UPDATE robot
        SET state = 0, command_inner_id = null,
            cmd_error_descr = null, wait_for_problem_resolve = 0
        WHERE id = NEW.robot_id;
    NEW.error_code_id := 1;
    NEW.state := 2;
    UPDATE emu_robot_problem
        SET state = 0
        WHERE state = 3
            AND robot_id = NEW.robot_id;
    DELETE FROM track_order WHERE robot_id = NEW.robot_id;
    IF coalesce(action_, '-') <> 'None' THEN
        INSERT INTO tmp_cmd_inner (ci_id, action)
            VALUES (NEW.id, action_);
    END IF;
    PERFORM obj_rpart.unlock_track_after_cmd_error(NEW.robot_id);
END;
$BODY$;
ALTER FUNCTION trigger.cmd_cancel(command_inner, text) OWNER TO postgres;
COMMENT ON FUNCTION trigger.cmd_cancel(command_inner, text)
    IS 'Migrated inline procedure for command_inner_bu_problemr_e trigger
';


CREATE OR REPLACE FUNCTION trigger.cmd_handle(
	INOUT new command_inner)
    RETURNS command_inner
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    ress BIGINT;
    ana RECORD;
BEGIN
    PERFORM service.log2file('trigger command_inner_bu_problemr_e - Пришло решение проблемы "выполнена вручную" от '
                            || current_user || ' для робота '
                            || NEW.robot_id || ' команды '
                            || NEW.id);
    IF (NEW.command_type_id IN (4)) THEN
        ress := NEW.npp_src;
    ELSE
        ress := NEW.npp_dest;
    END IF;
    FOR ana IN (
        SELECT *
            FROM robot r
            WHERE id = NEW.robot_id
                AND ress <> current_track_npp
    ) LOOP
        RAISE EXCEPTION 'Команда может быть выполнена вручную только если робот будет находиться в результирующей секции № %. Сейчас же робот находится в секции № %!', ress, ana.current_track_npp
            USING errcode = 50123;
    END LOOP;
    UPDATE emu_robot_problem
        SET state = 0
        WHERE state = 3
            AND robot_id = NEW.robot_id;
    UPDATE robot
        SET state = 0, command_inner_id = null,
            cmd_error_descr = null, wait_for_problem_resolve = 0
        WHERE id = NEW.robot_id;
    NEW.state := 5;
    DELETE FROM track_order WHERE robot_id = NEW.robot_id;
    INSERT INTO tmp_cmd_inner (ci_id)
        VALUES (NEW.id);
    PERFORM obj_rpart.unlock_track_after_cmd_error(NEW.robot_id);
    IF (NEW.command_type_id = 4) THEN -- load
        PERFORM service.mark_cell_as_free(NEW.cell_src_id, NEW.container_id, NEW.robot_id);
        INSERT INTO tmp_cmd_inner (ci_id, action)
            VALUES (NEW.id, 'L');
    ELSIF (NEW.command_type_id = 5) THEN -- unload
        PERFORM service.mark_cell_as_full(NEW.cell_dest_id, NEW.container_id, NEW.robot_id);
        INSERT INTO tmp_cmd_inner (ci_id, action)
            VALUES (NEW.id, 'G');
    END IF;
END;
$BODY$;
ALTER FUNCTION trigger.cmd_handle(command_inner) OWNER TO postgres;
COMMENT ON FUNCTION trigger.cmd_handle(command_inner)
    IS 'Migrated inline procedure for command_inner_bu_problemr_e trigger
';

-- vim: ft=pgsql
