SET client_encoding = 'UTF8';

CREATE OR REPLACE FUNCTION obj_cmd_order.get_container_izlish(
	cnt_id_ bigint,
    gd_id_ text,
    gd_party_id_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cc_id_ BIGINT;
    sqn BIGINT;
    qncnt BIGINT;
BEGIN
    SELECT id INTO cc_id_
        FROM container_collection
        WHERE state = 0
            AND container_id = cnt_id_;
    -- считаем сколько еще к отбиранию
    SELECT coalesce(
        sum(ccc.quantity_need - (ccc.quantity_real + ccc.quantity_deficit)),
        0
    ) INTO sqn
        FROM container_collection_content ccc
        WHERE ccc.cc_id = cc_id_
            AND good_desc_id = gd_id_
            AND coalesce(gd_party_id_, 0) = coalesce(gd_party_id, 0);
    -- считаем реальный остаток
    SELECT quantity INTO qncnt
        FROM container_content
        WHERE container_id = cnt_id_
            AND good_desc_id = gd_id_
            AND coalesce(gdp_id, 0) = coalesce(gd_party_id_, 0);
    IF (qncnt > sqn) THEN
        RETURN qncnt - sqn;
    ELSE
        RETURN 0;
    END IF;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.get_container_izlish(bigint, text, bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.get_container_izlish(bigint, text, bigint)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.get_rasdoc_rest(
	doc_id_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
    cr BIGINT;
    dc doc_content;
BEGIN
    res := 0;
    FOR dc IN (
        SELECT *
            FROM doc_content
            WHERE doc_id = doc_id_
    ) LOOP
        --dbms_output.put_line(doc_id_||' good_id='|| dc.good_id||' gdp_id='|| dc.gdp_id||' qty= '||dc.quantity);
        cr := obj_cmd_order.get_ras_gd_rest(doc_id_, dc.good_id, dc.gdp_id);
        --dbms_output.put_line('    rest='||cr);
        res := res + cr;
    END LOOP;
    RETURN res;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.get_rasdoc_rest(bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.get_rasdoc_rest(bigint)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.is_rashod_shortage(
	did_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
    dd doc;
BEGIN
    FOR dd IN (
        SELECT *
            FROM doc
            WHERE id = did_
    ) LOOP
        SELECT count(*) INTO cnt
            FROM command_order
            WHERE state = 2
                AND order_number = did_::TEXT
                AND date_time_create
                    BETWEEN dd.date_order - INTERVAL '1 day'
                    AND dd.date_order + INTERVAL '5 days';
        IF (cnt > 0) THEN
            RETURN 1;
        END IF;
    END LOOP;
    RETURN 0;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.is_rashod_shortage(bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.is_rashod_shortage(bigint)
    IS 'есть ли недостача?';


CREATE OR REPLACE FUNCTION obj_cmd_order.get_ras_gd_rest(
	doc_id_ bigint,
    gd_id_ bigint,
    party_id_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
    was BIGINT;
    wasg BIGINT;
    idold TEXT;
    dd DATE;
    is_party_c BIGINT;
    rparty_id_ BIGINT;
    cnt BIGINT;
    pname_ TEXT;
BEGIN
    SELECT id INTO idold
        FROM good_desc
        WHERE good_desc_id = gd_id_;
    --dbms_output.put_line('  gd.ID='||idold);
    SELECT is_party_calc INTO is_party_c
        FROM repository;
    IF (is_party_c = 1) THEN
        IF coalesce(party_id_, 0) <> 0 THEN
            rparty_id_ := party_id_;
        ELSE
            SELECT id::BIGINT INTO rparty_id_
                FROM gd_party
                WHERE pname IS null
                    AND gd_id = gd_id_;
        END IF;
        --dbms_output.put_line('  rparty_id_='||rparty_id_);
        IF coalesce(rparty_id_, 0) > 0 THEN
            SELECT pname INTO pname_
                FROM gd_party
                WHERE id::BIGINT = rparty_id_;
        ELSE
            pname_ := '';
        END IF;
        -- смотрим - нет ли нехватки товара
        SELECT count(*) INTO cnt
            FROM command_order
            WHERE order_number::bigint = doc_id_
                AND good_desc_id = idold
                AND gd_party_id = rparty_id_
                AND state = 2;
        IF (cnt > 0) THEN
            --dbms_output.put_line('  Нехватка товара');
            RETURN 0;
        END IF;
        SELECT coalesce(sum(quantity), 0) INTO res
            FROM doc_content
            WHERE doc_id = doc_id_
                AND good_id = gd_id_
                AND (
                    coalesce(gdp_id, 0) = coalesce(party_id_, 0)
                    OR
                    pname_ IS null AND coalesce(gdp_id, 0) <= 0
                );
        --dbms_output.put_line('  res='||res);
        SELECT date_order INTO dd
            FROM doc
            WHERE id = doc_id_;
        SELECT coalesce(sum(quantity), 0) INTO was
            FROM command_order
            WHERE good_desc_id = idold
                AND coalesce(gd_party_id, 0) = coalesce(rparty_id_,0)
                AND command_type_id = 16
                AND order_number::bigint = doc_id_
                AND date_time_create >= dd - 30;
        --dbms_output.put_line('  was='||was);
        SELECT coalesce(sum(quantity), 0) INTO wasg
            FROM command_gas
            WHERE good_desc_id = idold
                AND coalesce(gd_party_id, 0) = coalesce(rparty_id_, 0)
                AND command_type_id = 24
                AND pri_doc_number::bigint = doc_id_
                AND date_time_create >= dd - 30;
        --dbms_output.put_line('  wasg='||wasg);
    ELSE
        SELECT sum(quantity) INTO res
            FROM doc_content
            WHERE doc_id = doc_id_
                AND good_id = gd_id_
                AND coalesce(gdp_id, 0) = coalesce(party_id_, 0);
        SELECT date_order INTO dd
            FROM doc
            WHERE id = doc_id_;
        SELECT coalesce(sum(quantity), 0) INTO was
            FROM command_gas
            WHERE good_desc_id = idold
                AND coalesce(gd_party_id, 0) = coalesce(party_id_, 0)
                AND command_type_id = 24
                AND pri_doc_number::bigint = doc_id_
                AND date_time_create >= dd - 30;
        wasg := 0;
    END IF;
    RETURN res - was - wasg;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.get_ras_gd_rest(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.get_ras_gd_rest(bigint, bigint, bigint)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.get_order_content_out_picked(
    cmd_order_id_ bigint,
    deficite_type_ bigint DEFAULT 0)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
BEGIN
    IF (deficite_type_ = 1) THEN  -- реальный+дефицит
        SELECT coalesce(sum(quantity_real), 0) + coalesce(sum(quantity_deficit), 0) INTO res
            FROM container_collection_content
            WHERE cmd_order_id = cmd_order_id_;
    ELSIF (deficite_type_ = 0) THEN -- только реальный
        SELECT coalesce(sum(quantity_real), 0) INTO res
            FROM container_collection_content
            WHERE cmd_order_id = cmd_order_id_;
    ELSIF (deficite_type_ = 2) THEN  -- дефицит только
        SELECT coalesce(sum(quantity_deficit), 0) INTO res
            FROM container_collection_content
            WHERE cmd_order_id = cmd_order_id_;
    END IF;
    RETURN coalesce(res, 0);
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.get_order_content_out_picked(bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.get_order_content_out_picked(bigint, bigint)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.get_order_content_out_promis(
    cmd_order_id_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
BEGIN
    SELECT coalesce(
        sum(
            quantity_promis
            -
            obj_cmd_order.get_order_content_out_picked(co.id, 2)
        ),
        0
    ) prm INTO res
        FROM command_order co
        WHERE cmd_order_id_ IN (id, cmd_order_id)
            AND command_type_id = 15;
    RETURN res;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.get_order_content_out_promis(bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.get_order_content_out_promis(bigint)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.order_content_out_doz_on_dfct(
    )
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cor BIGINT;
    qqq BIGINT;
    rep repository;
    dzk RECORD;
    cg command_gas;
    otf RECORD;
    ce RECORD;
BEGIN
    IF service.get_rp_param_number('Order_Content_Out_Doz_on_dfct', 0) = 1 THEN
        FOR rep IN (
            SELECT *
                FROM repository
                WHERE coalesce(is_party_calc, 0) = 0
                    AND coalesce(storage_by_firm, 0) = 0
        ) LOOP -- только если склад не по партиям и не по фирмам
            FOR dzk IN (
                SELECT t.id cmd_order_id,
                    t.good_desc_id,
                    quantity_promis,
                    obj_cmd_order.get_order_content_out_picked(t.id) picked,
                    command_gas_id,
                    t.cmd_order_id cor,
                    gd.quantity gd_quantity,
                    rp_id,
                    cell_name,
                    order_number,
                    group_number
                    FROM command_order t
                    INNER JOIN good_desc gd
                        ON gd.id = t.good_desc_id
                    WHERE state = 5
                        AND command_type_id=15
                        AND obj_cmd_order.get_order_content_out_picked(t.id) <> quantity_promis -- только реальный <> обещанный
                        AND obj_cmd_order.get_order_content_out_picked(t.id, 1) = quantity_promis  -- реальный + дефицит = обещанный
                        AND LOCALTIMESTAMP - date_time_create < INTERVAL '3 days'
                        AND date_time_end IS null -- еще не помечена как завершенная
                        AND gd.quantity > 0
                        AND NOT exists(
                            SELECT *
                                FROM command_order
                                WHERE command_type_id = 15
                                    AND cmd_order_id = t.id
                        ) -- не создан повторный
                        AND NOT exists(
                            SELECT *
                                FROM command_order
                                WHERE command_type_id = 15
                                    AND cmd_order_id <> 0
                                    AND cmd_order_id = t.cmd_order_id
                                    AND id > t.id
                        ) -- не создан цепочка
                    ORDER BY t.id DESC
            ) LOOP
                IF (dzk.gd_quantity = 0) THEN
                    UPDATE command_order
                        SET date_time_end = LOCALTIMESTAMP
                        WHERE id = dzk.cmd_order_id; -- типа закончили с этой командой
                ELSE
                    IF (dzk.gd_quantity >= dzk.quantity_promis - dzk.picked) THEN
                        qqq := dzk.quantity_promis - dzk.picked;
                    ELSE
                        qqq := dzk.gd_quantity;
                    END IF;
                    FOR cg IN (
                        SELECT *
                            FROM command_gas
                            WHERE id = dzk.command_gas_id
                                AND state = 5
                    ) LOOP -- только для дозаверешенных
                        IF (dzk.cor = 0) THEN
                            cor := dzk.cmd_order_id;
                        ELSE
                            cor := dzk.cor;
                        END IF;
                        INSERT INTO command_order (
                            command_type_id, cmd_order_id, quantity,
                            good_desc_id, rp_id, cell_name
                        ) VALUES (
                            15, cor, qqq,
                            dzk.good_desc_id, dzk.rp_id, dzk.cell_name
                        );
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
        -- отбор завершен, наличия на складе нет
        FOR otf IN (
            SELECT t.id cmd_order_id,
                t.good_desc_id,
                t.quantity,
                quantity_promis,
                obj_cmd_order.get_order_content_out_picked(t.id) picked,
                command_gas_id,
                t.cmd_order_id cor,
                gd.quantity gd_quantity,
                rp_id,
                cell_name,
                order_number,
                group_number
                FROM command_order t
                INNER JOIN good_desc gd
                    ON gd.id = t.good_desc_id
                WHERE state IN (5,2)
                    AND command_type_id = 15
                    AND t.quantity <> quantity_promis
                    AND obj_cmd_order.get_order_content_out_picked(t.id) = quantity_promis
                    AND LOCALTIMESTAMP - date_time_create < INTERVAL '5 days'
                    AND gd.quantity + gd.quantity_reserved = 0
                    AND date_time_end IS null -- еще не завершенная
                    AND NOT exists(
                        SELECT *
                            FROM command_order
                            WHERE command_type_id = 15
                                AND cmd_order_id = t.id
                    ) --  не создан повторный
                    AND NOT exists(
                        SELECT *
                            FROM command_order
                            WHERE command_type_id = 15
                                AND cmd_order_id <> 0
                                AND cmd_order_id = t.cmd_order_id
                                AND id > t.id
                    ) -- не создан цепочка
                ORDER BY t.id DESC
        ) LOOP
            UPDATE command_order
                SET date_time_end = LOCALTIMESTAMP
                WHERE id = otf.cmd_order_id; -- типа закончили с этой командой
        END LOOP;
        -- отбор завершен, наличия на складе нет, но дефицит реально есть, а promis в command_order не исправлен
        FOR otf IN (
            SELECT t.id cmd_order_id,
                t.good_desc_id,
                t.quantity,
                quantity_promis,
                obj_cmd_order.get_order_content_out_picked(t.id) picked,
                command_gas_id,
                t.cmd_order_id cor,
                gd.quantity gd_quantity,
                rp_id,
                cell_name,
                order_number,
                group_number
                FROM command_order t
                INNER JOIN good_desc gd
                    ON gd.id = t.good_desc_id
                WHERE state IN (5)
                    AND command_type_id = 15
                    AND t.quantity = quantity_promis
                    AND obj_cmd_order.get_order_content_out_picked(t.id, 1) = quantity_promis
                    AND obj_cmd_order.get_order_content_out_picked(t.id, 2) > 0
                    AND LOCALTIMESTAMP - date_time_create < INTERVAL '2 days'
                    AND gd.quantity + gd.quantity_reserved = 0
                    AND date_time_end IS null -- еще не завершенная
                    AND NOT exists(
                        SELECT *
                            FROM command_order
                            WHERE command_type_id = 15
                                AND cmd_order_id = t.id
                    ) --  не создан повторный
                    AND NOT exists(
                        SELECT *
                            FROM command_order
                            WHERE command_type_id = 15
                                AND cmd_order_id <> 0
                                AND cmd_order_id = t.cmd_order_id
                                AND id > t.id
                    ) -- не создан цепочка
                ORDER BY t.id DESC
        ) LOOP
            UPDATE command_order
                SET date_time_end = LOCALTIMESTAMP
                WHERE id = otf.cmd_order_id; -- типа закончили с этой командой
        END LOOP;
        -- помечаем как законченные те команды, что успешно доподвезлись
        FOR ce IN (
            SELECT t.id, sum(quantity_need) - sum(quantity_real), sum(quantity_real), t.quantity
                FROM command_order t
                INNER JOIN container_collection_content ccc
                    ON ccc.cmd_order_id = t.id
                WHERE state = 5
                    AND command_type_id = 15
                    AND LOCALTIMESTAMP - date_time_create < INTERVAL '3 days'
                    AND coalesce(t.cmd_order_id, 0) <> 0
                    AND date_time_end IS null -- еще не помечена как завершенная
                    AND NOT exists(
                        SELECT *
                            FROM command_order
                            WHERE command_type_id = 15
                                AND id <> t.id
                                AND cmd_order_id IN (t.id, t.cmd_order_id)
                    ) -- не создан повторный
                GROUP BY t.id, t.quantity
                HAVING sum(quantity_need) - sum(quantity_real) = 0
                    AND sum(quantity_real) = t.quantity
        ) LOOP
            UPDATE command_order
                SET date_time_end = LOCALTIMESTAMP
                WHERE id = ce.id; -- типа закончили с этой командой
        END LOOP;
    END IF;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.order_content_out_doz_on_dfct() OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.order_content_out_doz_on_dfct()
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.add_to_cg_plan(
    cg_id bigint,
    qnt_ bigint,
    co command_order)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    new_qtp BIGINT;
    qnt BIGINT;
    qoc BIGINT;
    cgp command_gas_out_container_plan;
    prk command_gas_out_container;
BEGIN
    qnt := qnt_;
    FOR cgp IN (
        SELECT *
            FROM command_gas_out_container_plan
            WHERE cmd_gas_id = cg_id
                AND quantity_to_pick < quantity_all
            ORDER BY quantity_all - quantity_to_pick
    ) LOOP
        EXIT WHEN qnt = 0;
        IF (qnt <= cgp.quantity_all - cgp.quantity_to_pick) THEN
            new_qtp := cgp.quantity_to_pick + qnt;
            qoc := qnt;
            qnt := 0;
        ELSE
            new_qtp := cgp.quantity_all;
            qoc := cgp.quantity_all - cgp.quantity_to_pick;
            qnt := qnt - (cgp.quantity_all - cgp.quantity_to_pick);
        END IF;
        UPDATE command_gas_out_container_plan
            SET quantity_to_pick = new_qtp
            WHERE cmd_gas_id = cg_id
                AND cgp.container_id = container_id;
        -- теперь смотрим - а не числится ли этот контейнер среди уже привезенных
        FOR prk IN (
            SELECT *
                FROM command_gas_out_container
                WHERE cmd_gas_id = cgp.cmd_gas_id
                    AND container_id = cgp.container_id
        ) LOOP
        -- числится таки
            PERFORM obj_ask.log('add_to_cg_plan: уже есть подвезенный контейнер с которого можно взять чуток ' || qoc || '. container=' || prk.container_id);
            BEGIN
                INSERT INTO command_order_out_container (
                    cmd_order_id, container_id, container_barcode,
                    good_desc_id, quantity, order_number,
                    group_number, cell_name, point_number, gd_party_id
                ) VALUES (
                    co.id, prk.container_id, prk.container_barcode,
                    prk.good_desc_id, qoc, co.order_number,
                    co.group_number, prk.cell_name, co.point_number, co.gd_party_id
                );
            EXCEPTION WHEN others THEN
                PERFORM obj_ask.log('SORD: add_to_cg_plan - ошибка добавления - уже добавлено?');
            END;
            -- вот тут наверное проверка, а не покрыли ли полностью все что нужно, и не надо ли state=5 делать у command_order???
            -- if qoc=co.quantity then
            -- или правильней в form_command в sorder проверить - нет ли команд, что уже пора закрывать?
        END LOOP;
    END LOOP;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.add_to_cg_plan(bigint, bigint, command_order) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.add_to_cg_plan(bigint, bigint, command_order)
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.form_commands(
    )
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
    cmd_id BIGINT;
    cg_rec command_gas;
    qnt_need BIGINT;
    qnt_izlish BIGINT;
    qnt BIGINT;
    rrec repository;
    ppid BIGINT;
    nm RECORD;
    co command_order;
    gg good_desc;
    coll RECORD;
    acc RECORD;
    cics RECORD;
    sqlerrm__ TEXT;
BEGIN
    PERFORM obj_ask.log('obj_cmd_order.Form_Commands: НАЧАЛО');
    PERFORM obj_cmd_order.order_content_out_doz_on_dfct();
    PERFORM obj_ask.log('obj_cmd_order.Form_Commands: дозаказ после дефицита');
    -- проверяем, нет ли уже выполненных команд поставки, но у которых есть пометка, что они не выполнены
    FOR nm IN (
        SELECT co_.id, co_.quantity,
            coalesce(sum(cooc.quantity), 0) sumq,
            coalesce(sum(ccc.quantity_real), 0) sumcc
            FROM command_order co_
            INNER JOIN command_order_out_container cooc
                ON cooc.cmd_order_id = co_.id
                    AND coalesce(cooc.gd_party_id, 0) = coalesce(co_.gd_party_id, 0)
            INNER JOIN container_collection cc
                ON cc.cmd_gas_id = co_.command_gas_id
                    AND cc.container_id = cooc.container_id
            INNER JOIN container_collection_content ccc
                ON ccc.cc_id = cc.id
                    AND ccc.cmd_order_id = co_.id
                    AND coalesce(ccc.gd_party_id, 0) = coalesce(co_.gd_party_id, 0)
            WHERE command_type_id = 15
                AND co_.state IN (1,3)
            GROUP BY co_.id, co_.quantity
            HAVING co_.quantity = coalesce(sum(ccc.quantity_real), 0)
    ) LOOP
        PERFORM obj_ask.log('SORD: есть command_order выполненная, но помеченная как невыполненная с id=' || nm.id);
        UPDATE command_order
            SET state = 5
            WHERE id = nm.id;
        -- COMMIT;
    END LOOP;
    SELECT * INTO rrec
        FROM repository;
    FOR co IN (
        SELECT *
            FROM command_order
            WHERE state = 0
            ORDER BY id
    ) LOOP
        PERFORM obj_ask.log('SORD: есть еще нераспределенная команда сервера заказов с id=' || co.id);
        -------------------
        -- Order.Content.Out
        -------------------
        IF (co.command_type_id = 15) THEN
            PERFORM obj_ask.log('  SORD: тип=15');
            -- резервирование
            IF (rrec.storage_by_firm = 1) THEN -- проверка на наличие по фирме
                -- пытаемся резервировать
                SELECT quantity INTO qnt
                    FROM firm_gd
                    WHERE gd_id = co.good_desc_id
                        AND firm_id = co.firm_id;
                IF (qnt = 0) THEN
                    -- не можем зарезервировать
                    UPDATE command_order
                        SET state = 2,
                            quantity_promis = 0
                        WHERE id = co.id;
                ELSE
                    -- резервируем
                    IF (qnt >= co.quantity) THEN
                        qnt := co.quantity;
                    END IF;
                    UPDATE firm_gd
                        SET quantity_reserved = quantity_reserved + qnt,
                            quantity = quantity - qnt
                        WHERE gd_id = co.good_desc_id
                            AND firm_id = co.firm_id;
                    UPDATE command_order
                        SET quantity_promis = qnt
                        WHERE id = co.id;
                END IF;
            ELSIF coalesce(rrec.is_party_calc, 0) = 1 THEN -- учет по партиям
                FOR gg IN (
                    SELECT *
                        FROM good_desc
                        WHERE id = co.good_desc_id
                ) LOOP
                    IF coalesce(co.gd_party_id, 0) = 0 THEN
                        SELECT id::BIGINT INTO ppid
                            FROM gd_party
                            WHERE gd_id = gg.good_desc_id
                                AND pname IS null;
                    ELSE
                        ppid := co.gd_party_id;
                    END IF;
                    -- пытаемся резервировать
                    PERFORM obj_ask.log('SORD: попытка резервирования партии gg.good_desc_id=' || gg.good_desc_id
                        || ' ppid=' || ppid);
                    SELECT qty INTO qnt
                        FROM gd_party
                        WHERE gd_id = gg.good_desc_id
                            AND ppid::TEXT = id; ---qty_reserved
                    PERFORM obj_ask.log('SORD: qnt=' || qnt || ' co.quantity=' || co.quantity);
                    IF (qnt <= 0) THEN
                        -- не можем зарезервировать
                        UPDATE command_order
                            SET state = 2,
                                quantity_promis = 0
                            WHERE id = co.id;
                    ELSE
                        -- резервируем
                        IF (qnt >= co.quantity) THEN
                            qnt := co.quantity;
                        END IF;
                        UPDATE gd_party
                            SET qty_reserved = qty_reserved + qnt,
                                qty = qty - qnt
                            WHERE gd_id = gg.good_desc_id
                                AND id = ppid::TEXT;
                        UPDATE command_order
                            SET quantity_promis = qnt
                            WHERE id = co.id;
                    END IF;
                END LOOP;
            ELSE -- учет товаров общий
                -- пытаемся резервировать
                SELECT quantity INTO qnt
                    FROM good_desc
                    WHERE id = co.good_desc_id;
                IF (qnt = 0) THEN
                    -- не можем зарезервировать
                    UPDATE command_order
                        SET state = 2,
                            quantity_promis = 0
                        WHERE id = co.id;
                ELSE
                    -- резервируем
                    IF (qnt >= co.quantity) THEN
                        qnt := co.quantity;
                    END IF;
                    UPDATE good_desc
                        SET quantity_reserved = quantity_reserved + qnt,
                            quantity = quantity - qnt
                        WHERE id = co.good_desc_id;
                    UPDATE command_order
                        SET quantity_promis = qnt
                        WHERE id = co.id;
                END IF;
            END IF;
            IF (qnt > 0) THEN
                BEGIN
                    SELECT * INTO cg_rec
                        FROM command_gas cg
                        WHERE cg.command_type_id = 12
                            AND state IN (0,1,3)
                            AND good_desc_id = co.good_desc_id
                            AND priority = -co.group_number
                            AND coalesce(gd_party_id, 0) = coalesce(co.gd_party_id, 0)
                            AND rp_id = co.rp_id
                            AND cell_name = co.cell_name
                        LIMIT 1;
                    -- нашли - уже сформировано command_gas
                    PERFORM obj_ask.log('  SORD: есть command_gas куда приткнуться id=' || cg_rec.id);
                    UPDATE command_gas
                        SET quantity = quantity + qnt
                        WHERE id = cg_rec.id;
                    IF (cg_rec.state = 3) THEN -- еще надо формировать по команде
                        UPDATE command_gas
                            SET state = 1
                            WHERE id = cg_rec.id;
                    END IF;
                    UPDATE command_order
                        SET command_gas_id = cg_rec.id,
                            state = 1,
                            quantity_from_gas = qnt
                        WHERE id = co.id;
                    PERFORM obj_cmd_order.add_to_cg_plan(cg_rec.id, qnt, co);
                EXCEPTION WHEN others THEN
                    -- не нашли - еще нет ничего
                    PERFORM obj_ask.log('  SORD: нету command_gas куда приткнуться - вначале ищем а нет ли уже готовых. при этом qnt=' || qnt);
                    -- вначале смотрим - а не открыть ли коллекцию по имеющемуся в соотв. ячейки контейнеру ?
                    FOR coll in (
                        SELECT DISTINCT c.id, ccnt.good_desc_id, c.barcode,
                            cl.sname, ccnt.gdp_id gd_party_id,
                            c.cell_id
                            FROM container c
                            INNER JOIN container_content ccnt
                                ON ccnt.container_id = c.id
                            INNER JOIN cell cl
                                ON cl.id = c.cell_id
                            WHERE NOT exists(
                                SELECT * FROM container_collection cc
                                    WHERE cc.container_id = c.id
                                        AND state = 0
                                )
                                AND ccnt.good_desc_id = co.good_desc_id
                                AND coalesce(ccnt.gdp_id, 0) = coalesce(co.gd_party_id, 0)
                                AND ccnt.quantity > 0
                                AND trim(upper(cl.notes)) = trim(upper(co.comp_name))
                    ) LOOP
                        INSERT INTO container_collection (
                            container_id, cmd_gas_id, container_barcode, cell_name
                        ) values (
                            coll.id, 0, coll.barcode, coll.sname
                        );
                    END LOOP;
                    -- а теперь смотрим - не стоит ли открыть состав коллекции по имеющейся коллекции
                    FOR acc IN (
                        SELECT cc.id
                            FROM container_collection cc
                            INNER JOIN container c
                                ON cc.container_id = c.id
                            INNER JOIN container_content ccnt
                                ON ccnt.container_id = c.id
                            INNER JOIN cell cl
                                ON cl.id = c.cell_id
                            WHERE cc.state = 0
                                AND NOT exists(
                                    SELECT *
                                        FROM container_collection_content ccc
                                        WHERE ccc.cc_id = cc.id
                                            AND ccc.good_desc_id = co.good_desc_id
                                            AND coalesce(ccc.gd_party_id, 0) = coalesce(co.gd_party_id, 0)
                                )
                                AND ccnt.good_desc_id = co.good_desc_id
                                AND coalesce(ccnt.gdp_id, 0) = coalesce(co.gd_party_id, 0)
                                AND ccnt.quantity > 0
                                AND trim(upper(cl.notes)) = trim(upper(co.comp_name))
                    ) LOOP
                        INSERT INTO container_collection_content (
                            cc_id, cmd_order_id, quantity_need, quantity_real,
                            quantity_deficit, good_desc_id, gd_party_id
                        ) VALUES (
                            acc.id, 0, 0, 0,
                            0, co.good_desc_id, co.gd_party_id
                        ); -- добавляем пустую команду чтоб был отбор
                    END LOOP;
                    -- смотрим, есть ли контейнер в местах отбора, у которых можно стянуть немного
                    qnt_need := qnt;
                    FOR cics IN (
                        SELECT DISTINCT
                            c.id, ccnt.good_desc_id, c.barcode,
                            cc.cell_name, ccnt.gdp_id gd_party_id,
                            c.cell_id
                            FROM container c
                            INNER JOIN container_collection cc
                                ON c.id = cc.container_id
                            INNER JOIN container_collection_content ccc
                                ON ccc.cc_id = cc.id
                            INNER JOIN container_content ccnt
                                ON ccnt.container_id = c.id
                            INNER JOIN cell cl
                                ON cl.id = c.cell_id
                            WHERE state=0
                                AND ccnt.quantity > 0
                                AND ccnt.good_desc_id = co.good_desc_id
                                AND coalesce(ccnt.gdp_id, 0) = coalesce(co.gd_party_id, 0)
                                AND coalesce(co.gd_party_id, 0) = coalesce(ccc.gd_party_id, 0)
                                AND trim(upper(cl.notes)) = trim(upper(co.comp_name))
                    ) LOOP
                        PERFORM obj_ask.log('  SORD: зашли в цикл cnt_id=' || cics.id);
                        -- если контейнер на рабочем столе или в ячейке закр. за компом команды
                        IF coalesce(cics.cell_id, 0) = 0
                            OR service.is_cell_on_comp(cics.cell_id, co.comp_name) = 1
                        THEN
                            qnt_izlish := obj_cmd_order.get_container_izlish(cics.id, cics.good_desc_id, cics.gd_party_id);
                            IF (qnt_izlish > 0) THEN
                                PERFORM obj_ask.log('  SORD: qnt_izlish=' || qnt_izlish);
                                IF (qnt_need <= qnt_izlish) THEN -- хватит полностью
                                    INSERT INTO command_order_out_container (
                                        cmd_order_id, container_id, container_barcode,
                                        good_desc_id, quantity, order_number,
                                        group_number, cell_name, point_number,
                                        gd_party_id
                                    ) VALUES (
                                        co.id, cics.id, cics.barcode,
                                        cics.good_desc_id, qnt_need, co.order_number,
                                        co.group_number, cics.cell_name, co.point_number,
                                        cics.gd_party_id
                                    );
                                    UPDATE command_order
                                        SET state = 5
                                        WHERE id = co.id;
                                    PERFORM obj_ask.log('  SORD: ставим co.state=5');
                                    qnt_need := 0;
                                ELSE
                                    INSERT INTO command_order_out_container (
                                        cmd_order_id, container_id, container_barcode,
                                        good_desc_id, quantity, order_number,
                                        group_number, cell_name, point_number,
                                        gd_party_id
                                    ) VALUES (
                                        co.id, cics.id, cics.barcode,
                                        cics.good_desc_id, qnt_izlish, co.order_number,
                                        co.group_number, cics.cell_name, co.point_number,
                                        cics.gd_party_id
                                    );
                                    qnt_need := qnt_need - qnt_izlish;
                                    UPDATE command_order
                                        SET state = 1
                                        WHERE id = co.id;
                                END IF;
                            END IF;
                        END IF;
                        EXIT WHEN qnt_need = 0;
                    END LOOP;
                    IF (qnt_need > 0) THEN
                        INSERT INTO command_gas (
                            command_type_id, priority, cell_name,
                            rp_id, quantity, good_desc_id,
                            reserved, firm_id, gd_party_id,
                            comp_name
                        ) VALUES (
                            12, coalesce(-co.group_number, 0), co.cell_name,
                            co.rp_id, qnt_need, co.good_desc_id,
                            1, co.firm_id, co.gd_party_id,
                            co.comp_name
                        ) RETURNING id INTO cmd_id;
                        PERFORM obj_ask.log('  SORD: id новой command_gas =' || cmd_id);
                        UPDATE command_order
                            SET command_gas_id = cmd_id,
                                state = 1
                            WHERE id = co.id;
                    END IF;
                END;
            END IF;
        END IF;
    END LOOP;
EXCEPTION WHEN others THEN
    GET STACKED DIAGNOSTICS sqlerrm__ = MESSAGE_TEXT;
    PERFORM obj_ask.log('ERROR - ошибка из cmd_order.Form_Commands: ' || sqlerrm__);
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.form_commands() OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.form_commands()
    IS '';


CREATE OR REPLACE FUNCTION obj_cmd_order.cancel_error_cmd_cont_out(
    cmd_order_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cmd command_order;
BEGIN
    FOR cmd IN (
        SELECT *
            FROM command_order
            WHERE id = cmd_order_id_
                AND command_type_id = 15
                AND state <> 2
    ) LOOP
        --update command_order set state=2 where id=cmd.id;
        IF (cmd.state = 5) THEN
            UPDATE good_desc
                SET quantity = quantity + cmd.quantity,
                    quantity_reserved = quantity_reserved - cmd.quantity
                WHERE id = cmd.good_desc_id;
            DELETE FROM container_collection_content
                WHERE cmd_order_id = cmd.id;
            DELETE FROM command_order_out_container
                WHERE cmd_order_id = cmd.id;
        END IF;
        -- COMMIT;
        RETURN;
    END LOOP;
    RAISE EXCEPTION 'Указанная команда не является пододящей для отмены'
        USING errcode = 50003;
END;
$BODY$;
ALTER FUNCTION obj_cmd_order.cancel_error_cmd_cont_out(bigint) OWNER TO postgres;
COMMENT ON FUNCTION obj_cmd_order.cancel_error_cmd_cont_out(bigint)
    IS '';


-- vim: ft=pgsql
