SET client_encoding = 'UTF8';

CREATE OR REPLACE FUNCTION service.bkp_to_file_active(
    )
    RETURNS boolean
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    RETURN true;
END;
$BODY$;
ALTER FUNCTION service.bkp_to_file_active() OWNER TO postgres;
COMMENT ON FUNCTION service.bkp_to_file_active()
    IS 'Imitation of variable from Oracle that disables/enables backuping with bkp_to_file
писать в лог короткий бэкап?';


CREATE OR REPLACE FUNCTION service.log2filen(
    filename text,
    txt text)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    PERFORM pg_catalog.pg_file_write(
        filename,
        to_char(LOCALTIMESTAMP, 'HH24:MI:SS.MS') || ' ' || txt || E'\n',
        true
    );
END;
$BODY$;
ALTER FUNCTION service.log2filen(text, text) OWNER TO postgres;
COMMENT ON FUNCTION service.log2filen(text, text)
    IS 'Add timestamped entry into file.
записать строку в файл';


CREATE OR REPLACE FUNCTION service.log2file(
    txt text,
    prefix text DEFAULT 'log_'::text)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    filename TEXT;
    append BOOLEAN;
    entry TEXT;
    entryPart Text;
BEGIN
    filename := prefix || to_char(LOCALTIMESTAMP, 'DDMMYY');
    append := true;
    entry := to_char(LOCALTIMESTAMP, 'HH24:MI:SS.MS') || ' ' || txt;
    LOOP
        IF (char_length(entry) > 250) THEN
            entryPart := substring(entry from 1 for 250);
            entry := substring(entry from 251);
        ELSE
            entryPart := entry;
            entry := null;
        END IF;
        PERFORM pg_catalog.pg_file_write(filename, entryPart || E'\n', append);
        EXIT WHEN entry IS null;
    END LOOP;
END;
$BODY$;
ALTER FUNCTION service.log2file(text, text) OWNER TO postgres;
COMMENT ON FUNCTION service.log2file(text, text)
    IS 'Adds timestamped entry into log file separating it into 250 characters lines.
записать строку в лог';


CREATE OR REPLACE FUNCTION service.bkp_to_file(
    filename text,
    txt text)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    append BOOLEAN;
    entry TEXT;
    entryPart TEXT;
    ns BIGINT;
BEGIN
    IF service.bkp_to_file_active() THEN
        RETURN;
    END IF;
    SELECT coalesce(no_shift, 0) INTO ns FROM repository;
    filename := 'BKP_DIR/' || to_char(LOCALTIMESTAMP, 'DDMMYY') || '_'
        || trim(to_char(ns, '0000')) || '_' || filename;
    append := true;
    entry := to_char(LOCALTIMESTAMP, 'HH24:MI:SS.MS') || ';' || txt;
    LOOP
        IF (char_length(entry) > 250) THEN
            entryPart := substring(entry from 1 for 250);
            entry := substring(entry from 251);
        ELSE
            entryPart := entry;
            entry := null;
        END IF;
        PERFORM pg_catalog.pg_file_write(filename, entryPart || E'\n', append);
        EXIT WHEN entry IS null;
    END LOOP;
END;
$BODY$;
ALTER FUNCTION service.bkp_to_file(text, text) OWNER TO postgres;
COMMENT ON FUNCTION service.bkp_to_file(text, text)
    IS 'Adds timestamped entry into backup file separated into 250 char lines
строку в журнал';


CREATE OR REPLACE FUNCTION service.to_number_my(
    ss text)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    RETURN ss::BIGINT;
EXCEPTION WHEN others THEN
    RETURN 0;
END;
$BODY$;
ALTER FUNCTION service.to_number_my(text) OWNER TO postgres;
COMMENT ON FUNCTION service.to_number_my(text)
    IS 'преобразовать строку в число';


CREATE OR REPLACE FUNCTION service.ml_get_rus_eng_val(
    in_rus text,
    in_eng text)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    rr RECORD;
BEGIN
    FOR rr IN (SELECT language FROM repository) LOOP
        IF (coalesce(rr.language, 0) = 0) THEN
            RETURN in_rus;
        ELSE
            RETURN in_eng;
        END IF;
    END LOOP;
    RETURN ''; -- Unreachable
END;
$BODY$;
ALTER FUNCTION service.ml_get_rus_eng_val(text, text) OWNER TO postgres;
COMMENT ON FUNCTION service.ml_get_rus_eng_val(text, text)
    IS 'Multilanguage (i18n) - returns string depending on language set in repository
мультиязычность - получить значение в зависимости от языка';


CREATE OR REPLACE FUNCTION service.ml_get_val(
    var_name_ text,
    val_def_ text)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    -- TODO: originally depends on call stack information to determine full key, which is definitely a hack
    -- Either change keys in db itself, or modify all calls to that function to include full name
    RETURN val_def_;
END;
$BODY$;
ALTER FUNCTION service.ml_get_val(text, text) OWNER TO postgres;
COMMENT ON FUNCTION service.ml_get_val(text, text)
    IS 'мультиязычность - получить значение ';


CREATE OR REPLACE FUNCTION service.get_last_cmd(
    comp_name_ text,
    OUT cmd_name text,
    OUT cmd_name_full text,
    OUT dt_cr text,
    OUT sost text,
    OUT error_ text)
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cgid BIGINT;
    cmd command;
    cr robot;
BEGIN
    error_ := '0';
    FOR cmd IN (
        SELECT cmd_.*
            FROM command cmd_
            INNER JOIN cell cl
                ON cl.id IN (cmd_.cell_src_id, cmd_.cell_dest_id)
            CROSS JOIN repository rp
            WHERE date_trunc('day', LOCALTIMESTAMP) - cmd_.date_time_create < INTERVAL '50 days'
                AND (
                    trim(upper(cl.notes)) = trim(upper(comp_name_))
                    OR
                    rp.cell_by_comp = 0
                )
            ORDER BY cmd_.id DESC
    ) LOOP
        cmd_name := service.ml_get_val('get_last_cmd.transfer_container', 'переместить контейнер');
        cmd_name_full := cmd.cell_src_sname || '(' || cmd.rp_src_id || ') -> '
            || cmd.cell_dest_sname || '(' || cmd.rp_dest_id || ')';
        dt_cr := to_char(cmd.date_time_create, 'dd.mm.yy hh24:mi');
        IF (cmd.state = 0) THEN
            sost := service.ml_get_val('get_last_cmd.prepared', 'готовится');
        ELSIF (cmd.state = 1) THEN
            sost := service.ml_get_val('get_last_cmd.received', 'получена АСК');
        ELSIF (cmd.state = 3) THEN
            sost := service.ml_get_val('get_last_cmd.running', 'запущена');
        ELSIF (cmd.state = 5) THEN
            sost := service.ml_get_val('get_last_cmd.finished', 'выполнена');
        ELSIF (cmd.state = 6) THEN
            sost := service.ml_get_val('get_last_cmd.canceled', 'отменена');
        ELSIF (cmd.state = 2) THEN
            sost := service.ml_get_val('get_last_cmd.error_serious', 'ошибка - обратитесь к сисадмину!');
        ELSE
            sost := service.ml_get_val('get_last_cmd.undefined', 'неопределено');
        END IF;
        FOR cr IN (
            SELECT r.*
                FROM robot r
                INNER JOIN command_inner ci
                    ON r.command_inner_id = ci.id
                INNER JOIN cell cl
                    ON (ci.command_type_id = 4 AND cl.id = cell_src_id
                        OR
                        ci.command_type_id = 5 AND cl.id = cell_dest_id)
                CROSS JOIN repository rp
                WHERE wait_for_problem_resolve = 1
                    AND (
                        trim(upper(cl.notes)) = trim(upper(comp_name_))
                        OR
                        rp.cell_by_comp = 0
                    )
        ) LOOP
            sost := service.ml_get_val('get_last_cmd.error_simple', 'Ошибка - жду решения оп-ра');
            error_ := '1';
        END LOOP;
        IF (error_ = '0') THEN
            FOR cr IN (
                SELECT r.*
                    FROM robot r
                    INNER JOIN command_inner ci
                        ON r.command_inner_id = ci.id
                    INNER JOIN command_rp crp
                        ON ci.command_rp_id = crp.id
                    INNER JOIN command cmd_
                        ON crp.command_id = cmd_.id
                    INNER JOIN cell cl
                        ON cl.id IN (cmd_.cell_src_id, cmd_.cell_dest_id)
                    CROSS JOIN repository rp
                    WHERE wait_for_problem_resolve = 1
                        AND (
                            trim(upper(cl.notes)) = trim(upper(comp_name_))
                            OR
                            rp.cell_by_comp = 0
                        )
            ) LOOP
                sost := service.ml_get_val('get_last_cmd.error_serious','Ошибка - обратитесь к сисадмину!');
                error_ := '2';
            END LOOP;
        END IF;
        RETURN;
    END LOOP;
    cmd_name := '-';
    cmd_name_full := '-';
    dt_cr := '-';
    sost := '-';
END;
$BODY$;
ALTER FUNCTION service.get_last_cmd(text) OWNER TO postgres;
COMMENT ON FUNCTION service.get_last_cmd(text)
    IS 'получить информацию о состоянии последней команды, отданной с указанного компьютера';


CREATE OR REPLACE FUNCTION service.get_another_robot_id(
    rid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
BEGIN
    --test;
    SELECT id INTO res
        FROM robot
        WHERE repository_part_id = (
            SELECT repository_part_id
                FROM robot
                WHERE id = rid
        )
        AND id <> rid;
    RETURN res;
END;
$BODY$;
ALTER FUNCTION service.get_another_robot_id(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.get_another_robot_id(bigint)
    IS 'взять второй робот на огурце';


CREATE OR REPLACE FUNCTION service.get_rp_param_number(
    cpn text,
    def bigint DEFAULT 0)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cp repository_param;
BEGIN
    FOR cp IN (
        SELECT *
            FROM repository_param
            WHERE trim(upper(name)) = trim(upper(cpn))
    ) LOOP
        RETURN coalesce(cp.value_number, 0);
    END LOOP;
    RETURN def;
END;
$BODY$;
ALTER FUNCTION service.get_rp_param_number(text, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.get_rp_param_number(text, bigint)
    IS 'взять числовой параметр всего АСК';


CREATE OR REPLACE FUNCTION service.get_container_sum_qty(
    cnt_id_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    res BIGINT;
BEGIN
    res := 0;
    SELECT coalesce(sum(quantity), 0) INTO res
        FROM container_content
        WHERE container_id = cnt_id_;
    RETURN res;
END;
$BODY$;
ALTER FUNCTION service.get_container_sum_qty(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.get_container_sum_qty(bigint)
    IS 'сколько штук товара в контейнере?';


CREATE OR REPLACE FUNCTION service.mark_cell_as_free(
    cid bigint,
    container_id_ bigint,
    robot_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    crec cell;
    sn TEXT;
    cmd_id_ BIGINT DEFAULT 0;
BEGIN
    PERFORM service.log2file('mark_cell_as_free ' || cid || ' ' || container_id_ || ' ' || robot_id_);
    SELECT * INTO crec FROM cell WHERE id = cid;
    BEGIN
        SELECT command_id INTO cmd_id_
            FROM command_rp
            WHERE id = (
                SELECT command_rp_id FROM robot WHERE id = robot_id_
            );
    EXCEPTION WHEN others THEN
        null;
    END;
    IF (cmd_id_ <> 0) THEN -- есть команда, от имени которой разблокировать
        PERFORM service.cell_unlock_from_cmd(cid, cmd_id_);
    END IF;
    UPDATE cell
        SET is_full = is_full - 1,
            blocked_by_ci_id = 0,
            container_id = 0
        WHERE id = cid;
    UPDATE container
        SET cell_id = 0,
            robot_id = robot_id_,
            location = 3
        WHERE id = container_id_;
    UPDATE robot
        SET container_id = container_id_
        WHERE id = robot_id_;
    IF (crec.hi_level_type = 7) THEN
        PERFORM service.add_shelving_need_to_redraw(crec.shelving_id);
        sn := crec.sname;
        SELECT * INTO crec
            FROM cell
            WHERE sname = sn
                AND hi_level_type = 8;
        IF (cmd_id_ <> 0) THEN -- есть команда, от имени которой разблокировать
            PERFORM service.cell_unlock_from_cmd(crec.id, cmd_id_);
        END IF;
        UPDATE cell
            SET is_full = is_full - 1,
                blocked_by_ci_id = 0,
                container_id = 0
            WHERE id = crec.id;
    END IF;
    PERFORM service.add_shelving_need_to_redraw(crec.shelving_id);
END;
$BODY$;
ALTER FUNCTION service.mark_cell_as_free(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.mark_cell_as_free(bigint, bigint, bigint)
    IS 'пометить ячейку как свободную';


CREATE OR REPLACE FUNCTION service.mark_cell_as_full(
    cid bigint,
    container_id_ bigint,
    robot_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    crec cell;
    sn TEXT;
BEGIN
    SELECT * INTO crec FROM cell WHERE id = cid;
    UPDATE cell
        SET is_full = is_full + 1,
            blocked_by_ci_id = 0,
            container_id = container_id_
        WHERE id = cid;
    UPDATE container
        SET cell_id = cid,
            robot_id = 0,
            location = 1
        WHERE id = container_id_;
    UPDATE robot
        SET container_id = 0
        WHERE id = robot_id_;
    IF (crec.hi_level_type = 8) THEN
        PERFORM service.add_shelving_need_to_redraw(crec.shelving_id);
        sn := crec.sname;
        SELECT * INTO crec
            FROM cell
            WHERE sname = sn
                AND hi_level_type = 7;
        UPDATE cell
            SET is_full = is_full + 1,
                blocked_by_ci_id = 0,
                container_id = container_id_
            WHERE id = crec.id;
        UPDATE container
            SET cell_id = crec.id,
                location = 1
            WHERE id = container_id_;
    END IF;
    PERFORM service.add_shelving_need_to_redraw(crec.shelving_id);
END;
$BODY$;
ALTER FUNCTION service.mark_cell_as_full(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.mark_cell_as_full(bigint, bigint, bigint)
    IS 'пометить ячейку как полную';


CREATE OR REPLACE FUNCTION service.add_shelving_need_to_redraw(
    shelving_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    INSERT INTO shelving_need_to_redraw (shelving_id)
        VALUES (shelving_id_);
EXCEPTION WHEN others THEN
    null;
END;
$BODY$;
ALTER FUNCTION service.add_shelving_need_to_redraw(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.add_shelving_need_to_redraw(bigint)
    IS 'добавить стеллаж к списку для перерисования';


CREATE OR REPLACE FUNCTION service.is_cell_full_check(
    )
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    rr RECORD;
BEGIN
    FOR rr IN (SELECT ignore_full_cell_check FROM repository) LOOP
        IF (coalesce(rr.ignore_full_cell_check, 0) = 1) THEN
            RETURN 0;
        ELSE
            RETURN 1;
        END IF;
    END LOOP;
    RETURN 0; -- Unreachable
END;
$BODY$;
ALTER FUNCTION service.is_cell_full_check() OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_full_check()
    IS 'ячейка полностью проверена?';


CREATE OR REPLACE FUNCTION service.is_cell_near_edge(
    cid_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cc RECORD;
    rp RECORD;
BEGIN
    FOR cc IN (SELECT * FROM cell WHERE id = cid_) LOOP
        FOR rp IN (
            SELECT repository_type, num_of_robots, max_npp, spacing_of_robots
            FROM repository_part WHERE id = cc.repository_part_id
        ) LOOP
            IF (rp.num_of_robots <> 2) OR (rp.repository_type <> 0) THEN
                RETURN 0;
            ELSE
                IF (cc.track_npp <= 2 * rp.spacing_of_robots) THEN
                    RETURN 1;
                ELSEIF (cc.track_npp >= rp.max_npp - 2 * rp.spacing_of_robots) THEN
                    RETURN 2;
                END IF;
            END IF;
        END LOOP;
    END LOOP;
    RETURN 0;
END;
$BODY$;
ALTER FUNCTION service.is_cell_near_edge(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_near_edge(bigint)
    IS 'If cell near beginning of line - returns 1, near end - returns 2, otherwise returns 0
ячейка возде края №№ треков?';


CREATE OR REPLACE FUNCTION service.is_cell_on_comp(
    cid_ bigint,
    cname text)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cc cell;
BEGIN
    FOR cc IN (
        SELECT *
            FROM cell
            WHERE id = cid_
                AND upper(notes) = upper(cname)
    ) LOOP
        RETURN 1;
    END LOOP;
    RETURN 0;
END;
$BODY$;
ALTER FUNCTION service.is_cell_on_comp(bigint, text) OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_on_comp(bigint, text)
    IS 'ячейка закреплена за компьютером?';


CREATE OR REPLACE FUNCTION service.cell_acc_only_1_robot(
    src_ bigint,
    dst_ bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cs RECORD;
    cd RECORD;
    tua RECORD;
    rr BOOLEAN;
BEGIN
    FOR cs IN (SELECT * FROM cell WHERE id = src_) LOOP
        FOR cd IN (SELECT * FROM cell WHERE id = dst_) LOOP
            FOR tua IN (
                SELECT r.* FROM robot r
                    WHERE r.repository_part_id = cs.repository_part_id
                    AND coalesce(work_npp_from, -1) >= 0
                    AND coalesce(work_npp_to, -1) >= 0
                    AND cs.track_npp NOT BETWEEN coalesce(work_npp_from, -1)
                    AND coalesce(work_npp_to, -1)
            ) LOOP
                -- источник недостижим для робота tua.id
                SELECT exists(
                    SELECT * FROM robot r
                        WHERE r.repository_part_id = cd.repository_part_id
                        AND r.id <> tua.id
                        AND coalesce(work_npp_from, -1) >= 0
                        AND coalesce(work_npp_to, -1) >= 0
                        AND cd.track_npp NOT BETWEEN coalesce(work_npp_from, -1) AND coalesce(work_npp_to, -1)
                ) INTO rr;
                IF rr THEN
                    -- цель недостижима для второго робота
                    RETURN 1;
                END IF;
            END LOOP;
        END LOOP;
    END LOOP;
    RETURN 0;
END;
$BODY$;
ALTER FUNCTION service.cell_acc_only_1_robot(bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.cell_acc_only_1_robot(bigint, bigint)
    IS 'Check if cell is only accessible by 1 robot.
ячейка достижима лишь для одного робота? (для линейных огурцов)';


CREATE OR REPLACE FUNCTION service.is_cell_over_locked(
    cid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
    crec RECORD;
BEGIN
    SELECT count(*) INTO cnt FROM cell_cmd_lock WHERE cell_id = cid;
    IF (cnt = 0) THEN
        RETURN 0;
    ELSE
        SELECT * INTO crec FROM cell WHERE id = cid;
        IF (cnt >= crec.max_full_size) THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.is_cell_over_locked(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_over_locked(bigint)
    IS 'Check if amount of locks on cell is over max.
не перезаблокирование ли ячейки командами?';


CREATE OR REPLACE FUNCTION service.is_cell_accept_enable(
    cfull bigint,
    cfullmax bigint,
    cid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
BEGIN
    IF (cfull >= cfullmax) THEN
        -- и так полон
        RETURN 0;
    ELSE
        -- считаем сколько блокировок
        SELECT count(*) INTO cnt
            FROM cell_cmd_lock
            WHERE cell_id = cid;
        IF (cnt + cfull) >= cfullmax THEN
            RETURN 0;
        ELSE
            RETURN 1;
        END IF;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.is_cell_accept_enable(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_accept_enable(bigint, bigint, bigint)
    IS 'возвращает 1, если можно еще дать команду в эту ячейку (проверяет is_full и блокировки)';


CREATE OR REPLACE FUNCTION service.is_cell_cmd_locked(
    cid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
    cfull BIGINT;
BEGIN
    SELECT count(*) INTO cnt FROM cell_cmd_lock WHERE cell_id = cid;
    SELECT is_full INTO cfull FROM cell WHERE id = cid;
    IF cnt < cfull OR cnt = 0 THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.is_cell_cmd_locked(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_cell_cmd_locked(bigint)
    IS 'заблокирована ли ячейка командой?';


CREATE OR REPLACE FUNCTION service.is_free_way(
    rid bigint,
    rnpp bigint,
    gnpp bigint,
    dir bigint,
    maxnpp bigint,
    rpid bigint)
    RETURNS boolean
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    ctr BIGINT;
    has_pregr BOOLEAN;
    lid BIGINT;
BEGIN
    ctr := rnpp;
    has_pregr := false;
    LOOP
        SELECT locked_by_robot_id INTO lid
            FROM track
            WHERE repository_part_id = rpid
                AND npp = ctr;
        IF (lid NOT IN (rid,0)) THEN
            has_pregr := true;
        END IF;
        EXIT WHEN has_pregr OR ctr = gnpp;
        IF (dir = 1) THEN
            IF (ctr = maxnpp) THEN
                ctr := 0;
            ELSE
                ctr := ctr + 1;
            END IF;
        ELSE
            IF (ctr = 0) THEN
                ctr := maxnpp;
            ELSE
                ctr := ctr - 1;
            END IF;
        END IF;
    END LOOP;
    RETURN NOT has_pregr;
END;
$BODY$;
ALTER FUNCTION service.is_free_way(bigint, bigint, bigint, bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_free_way(bigint, bigint, bigint, bigint, bigint, bigint)
    IS 'путь свободен?';


CREATE OR REPLACE FUNCTION service.is_way_free_for_robot(
    rid_ bigint,
    npp_from bigint,
    npp_to bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    npp_ BIGINT;
    npp_exit BIGINT;
    rob robot;
    tr RECORD;
BEGIN
    FOR rob IN (
        SELECT *
            FROM robot
            WHERE id = rid_
    ) LOOP
        npp_exit := obj_rpart.inc_spacing_of_robots(npp_to, 1, 1, rob.repository_part_id);
        npp_ := npp_from;
        LOOP
            FOR tr IN (
                SELECT locked_by_robot_id lbr
                    FROM track
                    WHERE npp = npp_
                        AND repository_part_id = rob.repository_part_id
            ) LOOP
                IF tr.lbr NOT IN (rid_ ,0) THEN
                    RETURN 0;
                END IF;
            END LOOP;
            npp_ := obj_rpart.inc_spacing_of_robots(npp_, 1, 1, rob.repository_part_id);
            EXIT WHEN npp_ = npp_exit;
        END LOOP;
    END LOOP;
    RETURN 1;
END;
$BODY$;
ALTER FUNCTION service.is_way_free_for_robot(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.is_way_free_for_robot(bigint, bigint, bigint)
    IS 'путь свободен для робота?';


CREATE OR REPLACE FUNCTION service.cell_unlock_from_cmd(
    cid bigint,
    cmd_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
BEGIN
    PERFORM service.log2file('cell_unlock_from_cmd cmd_id=' || cmd_id_ || ' cid=' || cid);
    SELECT count(*) INTO cnt
        FROM cell_cmd_lock
        WHERE cell_id = cid and cmd_id = cmd_id_;
    IF (cnt = 0) THEN
        PERFORM service.log2file('Unlock Error! Its not cell_lock w cell_id=' || cid || ' and cmd_id=' || cmd_id_);
    ELSE
        DELETE FROM cell_cmd_lock
            WHERE cell_id = cid and cmd_id = cmd_id_;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.cell_unlock_from_cmd(bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.cell_unlock_from_cmd(bigint, bigint)
    IS 'разблокируем ячейку от команды';


CREATE OR REPLACE FUNCTION service.unlock_all_not_ness(IN rid bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    rr RECORD;
    ct BIGINT;
    cnt BIGINT;
BEGIN
    FOR rr IN (
        SELECT r.id, r.current_track_npp npp,
            rp.max_npp, repository_type rt,
            rp.id rp_id, rp.spacing_of_robots sor
        FROM robot r
        INNER JOIN repository_part rp
            ON r.repository_part_id = rp.id
        WHERE r.id = rid
    ) LOOP
        -- разблокируем все, занятое текущим роботом
        UPDATE track SET locked_by_robot_id = 0 WHERE locked_by_robot_id = rid;
        -- блокируем вперед
        ct := rr.npp;
        cnt := 0;
        LOOP
            UPDATE track SET locked_by_robot_id = rid
                WHERE npp = ct
                AND repository_part_id = rr.rp_id;
            cnt := cnt + 1;
            IF (ct >= rr.max_npp) THEN
                IF (rr.rt = 1) THEN
                    ct := 0;
                ELSE
                    EXIT;
                END IF;
            ELSE
                ct := ct + 1;
            END IF;
            EXIT WHEN cnt > rr.sor;
        END LOOP;
        -- блокируем назад
        ct := rr.npp;
        cnt := 0;
        LOOP
            UPDATE track SET locked_by_robot_id = rid
                WHERE npp = ct
                AND repository_part_id = rr.rp_id;
            cnt := cnt + 1;
            IF (ct <= 0) THEN
                IF (rr.rt = 1) THEN
                    ct := rr.max_npp;
                ELSE
                    EXIT;
                END IF;
            ELSE
                ct := ct - 1;
            END IF;
            EXIT WHEN cnt > rr.sor;
        END LOOP;
    END LOOP;
END;
$BODY$;
ALTER FUNCTION service.unlock_all_not_ness(bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.unlock_all_not_ness(bigint)
    IS 'разблокируем все, заблокированное текущим роботом кроме расстояния вокруг робота';


CREATE OR REPLACE FUNCTION service.empty_cell_capability(
    cfull bigint,
    cfullmax bigint,
    cid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    cnt BIGINT;
BEGIN
    IF (cfull = cfullmax) THEN
        RETURN 0;
    ELSE
        -- считаем сколько блокировок
        SELECT count(*) INTO cnt
            FROM cell_cmd_lock
            WHERE cell_id = cid;
        IF (cnt + cfull >= cfullmax) THEN
            RETURN 0;
        ELSE
            RETURN cfullmax - (cnt + cfull);
        END IF;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.empty_cell_capability(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.empty_cell_capability(bigint, bigint, bigint)
    IS 'сколько еще может влезть коман в ячейку';


CREATE OR REPLACE FUNCTION service.cell_lock_by_cmd(
    cid bigint,
    cmd_id_ bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    INSERT INTO cell_cmd_lock(cell_id, cmd_id) VALUES (cid, cmd_id_);
END;
$BODY$;
ALTER FUNCTION service.cell_lock_by_cmd(bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.cell_lock_by_cmd(bigint, bigint)
    IS 'заблокировать ячейку командой';


CREATE OR REPLACE FUNCTION service.calc_ideal_crp_cost(
    rp_id_ bigint,
    csrc_id bigint,
    cdest_id bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    rpt BIGINT;
    max_npp_ BIGINT;
    res REAL;
    tpos REAL;
    t_start_m REAL;
    t_stop_m REAL;
    src_npp BIGINT;
    dest_npp BIGINT;
    tmp REAL;
    cnpp BIGINT;
    tt REAL;
    res1 REAL; -- Clockwise cost
    res2 REAL; -- Counterclockwise cost
BEGIN
    SELECT repository_type, max_npp INTO rpt, max_npp_
        FROM repository_part WHERE id = rp_id_;
    SELECT (avg(time_load) + avg(time_unload)) * 2, avg(time_targeting), avg(time_start_move), avg(time_stop_move)
        INTO res, tpos, t_start_m, t_stop_m
        FROM robot WHERE repository_part_id = rp_id_;
    SELECT track_npp INTO src_npp FROM cell WHERE id = csrc_id;
    SELECT track_npp INTO dest_npp FROM cell WHERE id = cdest_id;
    -- Linear track
    IF (rpt = 0) THEN -- линейный
        IF (src_npp = dest_npp) THEN
            RETURN round(res);
        ELSIF (src_npp > dest_npp) THEN
            SELECT sum(length / speed) INTO tmp
                FROM track WHERE repository_part_id = rp_id_
                AND npp BETWEEN dest_npp AND src_npp;
            RETURN round(res + tmp + tpos + t_start_m + t_stop_m);
        ELSIF (src_npp < dest_npp) THEN
            SELECT sum(length / speed) INTO tmp
                FROM track WHERE repository_part_id = rp_id_
                AND npp BETWEEN src_npp AND dest_npp;
            RETURN round(res + tmp + tpos + t_start_m + t_stop_m);
        END IF;
    -- Cyclic track
    ELSE -- кольцевой
        -- Clockwise
        -- считаем по часовой
        IF (src_npp = dest_npp) THEN
            tpos := 0;
            t_stop_m := 0;
            t_start_m := 0;
        END IF;
        cnpp := src_npp;
        tmp := 0;
        LOOP
            SELECT length / speed INTO tt FROM track
                WHERE repository_part_id = rp_id_ AND npp = cnpp;
            tmp := tmp + tt;
            IF cnpp >= max_npp_ THEN
                cnpp := 0;
            ELSE
                cnpp := cnpp + 1;
            END IF;
            EXIT WHEN cnpp = dest_npp;
        END LOOP;
        res1 := tmp;
        -- Counterclockwise
        -- считаем против часовой
        cnpp := src_npp;
        tmp := 0;
        LOOP
            SELECT length / speed INTO tt FROM track
                WHERE repository_part_id=rp_id_ AND npp = cnpp;
            tmp := tmp + tt;
            IF (cnpp <= 0) THEN
                cnpp := max_npp_;
            ELSE
                cnpp := cnpp - 1;
            END IF;
            EXIT WHEN cnpp = dest_npp;
        END LOOP;
        res2 := tmp;
        IF (res2 < res1) THEN
            RETURN round(res + res2 + tpos + t_start_m + t_stop_m);
        ELSE
            RETURN round(res + res1 + tpos + t_start_m + t_stop_m);
        END IF;
    END IF;
    RETURN -1; -- Unreachable
END;
$BODY$;
ALTER FUNCTION service.calc_ideal_crp_cost(bigint, bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.calc_ideal_crp_cost(bigint, bigint, bigint)
    IS 'посчитать идеальную цену команды перемещения контейнера';


CREATE OR REPLACE FUNCTION service.get_ust_cell_dir(
    rid bigint,
    gtid bigint)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    rnpp BIGINT;
    rpid BIGINT;
    gnpp BIGINT;
    maxnpp BIGINT;
    d1 BIGINT;
    d0 BIGINT;
    ano_rid BIGINT;
    is_ano_r_busy BOOLEAN;
    cnt BIGINT;
BEGIN
    BEGIN
        ano_rid := service.get_another_robot_id(rid);
        SELECT count(*) INTO cnt
            FROM command
            WHERE robot_id = ano_rid
                AND state IN (0,1,3);
        is_ano_r_busy := (cnt<>0);
    EXCEPTION WHEN others THEN
        is_ano_r_busy := false;
    END;
    SELECT current_track_npp, repository_part_id
        INTO rnpp, rpid
        FROM robot
        WHERE id = rid;
    SELECT npp
        INTO gnpp
        FROM track
        WHERE id = gtid;
    SELECT max_npp
        INTO maxnpp
        FROM repository_part
        WHERE id = rpid;
    IF (gnpp = rnpp) THEN
        RETURN 0;
    ELSIF (gnpp > rnpp) THEN -- цель более текущего
        d1 := gnpp - rnpp;
        d0 := rnpp + (maxnpp - gnpp);
    ELSE -- текущее более цели
        d0 := rnpp - gnpp;
        d1 := gnpp + (maxnpp - rnpp);
    END IF;
    IF (d1 < d0) THEN
        IF NOT is_ano_r_busy THEN
            RETURN 1;
        ELSE -- робот второй тоже работает - смотрим, а нельзя ли объехать
            IF service.is_free_way(rid, rnpp, gnpp, 1, maxnpp, rpid) THEN
                RETURN 1;
            ELSIF service.is_free_way(rid,rnpp,gnpp,0,maxnpp,rpid) THEN
                RETURN 0;
            ELSE
                RETURN 1;
            END IF;
        END IF;
    ELSE
        IF NOT is_ano_r_busy THEN
            RETURN 0;
        ELSE -- робот второй тоже работает - смотрим, а нельзя ли объехать
            IF service.is_free_way(rid,rnpp,gnpp,0,maxnpp,rpid) THEN
                RETURN 0;
            ELSIF service.is_free_way(rid,rnpp,gnpp,1,maxnpp,rpid) THEN
                RETURN 1;
            ELSE
                RETURN 1;
            END IF;
        END IF;
    END IF;
END;
$BODY$;
ALTER FUNCTION service.get_ust_cell_dir(bigint, bigint) OWNER TO postgres;
COMMENT ON FUNCTION service.get_ust_cell_dir(bigint, bigint)
    IS 'взять направление для юстировки';


-- vim: ft=pgsql
