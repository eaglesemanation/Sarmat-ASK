SET client_encoding = 'UTF8';

CREATE OR REPLACE FUNCTION command_inner_bu_status_e()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
    IF OLD.state = 3 AND NEW.state = 5 THEN -- команда успешно выполнилась
        PERFORM service.log2file('  триггер command_inner_bu_status_e - команда '
                                || NEW.id || ' для робота '
                                || NEW.robot_id || ' успешно выполнилась');
        INSERT INTO tmp_cmd_inner (ci_id) VALUES (NEW.id);
        /*update command_rp
        set
        command_inner_last_robot_id=NEW.robot_id,
        command_inner_executed=NEW.id
        where id=NEW.command_rp_id;*/
        NEW.date_time_end := LOCALTIMESTAMP;
        IF (NEW.command_type_id = 8) THEN -- transfer
            PERFORM service.mark_cell_as_full(NEW.cell_dest_id, NEW.container_id, NEW.robot_id);
            PERFORM service.mark_cell_as_free(NEW.cell_src_id, NEW.container_id, NEW.robot_id);
        ELSIF (NEW.command_type_id = 4) THEN -- load
            PERFORM service.mark_cell_as_free(NEW.cell_src_id, NEW.container_id, NEW.robot_id);
            INSERT INTO tmp_cmd_inner (ci_id, action) VALUES (NEW.id, 'L');
        ELSIF (NEW.command_type_id = 5) THEN -- unload
            PERFORM service.mark_cell_as_full(NEW.cell_dest_id, NEW.container_id, NEW.robot_id);
            INSERT INTO tmp_cmd_inner (ci_id, action) VALUES (NEW.id,'G');
        END IF;
    ELSIF OLD.state = 1 AND NEW.state = 3 THEN -- команда успешно назначена
        NEW.date_time_begin := LOCALTIMESTAMP;
        IF coalesce(NEW.command_rp_id, 0) <> 0 THEN
            INSERT INTO tmp_cmd_inner (ci_id, action) VALUES (NEW.id, 'N');
        END IF;
        -- elsif OLD.state is not null and NEW.state=2 then -- команда ошибка
        --     insert into tmp_cmd_inner values(NEW.id);
    END IF;
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION command_inner_bu_status_e()
    OWNER TO postgres;

DROP TRIGGER IF EXISTS command_inner_bu_status_e ON command_inner;

CREATE TRIGGER command_inner_bu_status_e
    BEFORE UPDATE OF state
    ON command_inner
    FOR EACH ROW
    EXECUTE PROCEDURE command_inner_bu_status_e();

-- vim: ft=pgsql
